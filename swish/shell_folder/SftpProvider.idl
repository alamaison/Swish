/*  Declaration of the ISftpProvider and ISftpConsumer interfaces.

    Copyright (C) 2008  Alexander Lamaison <awl03@doc.ic.ac.uk>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

import "unknwn.idl";
import "oaidl.idl";

/**
 * The record structure returned by the GetListing() method of the SFTPProvider.
 *
 * This structure represents a single file contained in the directory 
 * specified to GetListing().
 */

struct Listing {
	BSTR bstrFilename;    ///< Directory-relative filename (e.g. README.txt)
	ULONG uPermissions;   ///< Unix file permissions
	BSTR bstrOwner;       ///< The user name of the file's owner
	BSTR bstrGroup;       ///< The name of the group to which the file belongs
	ULONG uUid;           ///< Numerical ID of file's owner
	ULONG uGid;           ///< Numerical ID of group to which the file belongs
	ULONGLONG uSize;      ///< The file's size in bytes
	ULONG cHardLinks;     ///< The number of hard links referencing this file
	DATE dateModified;    ///< The date and time at which the file was 
	                      ///< last modified in automation-compatible format
	DATE dateAccessed;    ///< The date and time at which the file was 
	                      ///< last accessed in automation-compatible format
};

// IEnumListing
[
	object, uuid("b816a843-5022-11dc-9153-0090f5284f85"),
	oleautomation,
	helpstring("IEnumListing Interface")
]
interface IEnumListing : IUnknown
{
	/* Will need local/remote hack if used remotely */
	HRESULT Next (
		[in] ULONG celt,
		[out] struct Listing *rgelt,
		[out] ULONG *pceltFetched);
	HRESULT Skip ([in] ULONG celt);
	HRESULT Reset ();
	HRESULT Clone ([out] IEnumListing **ppEnum);
};

// ISftpConsumer
[
	object, uuid("644740CC-9490-4243-A4EA-23F2006E626A"),
	//uuid("b816a844-5022-11dc-9153-0090f5284f85"),
	oleautomation, 
	helpstring("ISftpConsumer Interface")
]
interface ISftpConsumer : IUnknown
{
	HRESULT OnPasswordRequest(
		[in]          BSTR bstrRequest,
		[out, retval] BSTR *pbstrPassword
	);
	HRESULT OnKeyboardInteractiveRequest(
		[in]          BSTR bstrName,
		[in]          BSTR bstrInstruction,
		[in]          SAFEARRAY(BSTR) saPrompts,
		[in]          SAFEARRAY(VARIANT_BOOL) saShowResponses,
		[out, retval] SAFEARRAY(BSTR) *psaResponses
	);
	HRESULT OnPrivateKeyFileRequest(
		[out]         BSTR *pbstrPrivateKeyFile
	);
	HRESULT OnPublicKeyFileRequest(
		[out]         BSTR *pbstrPublicKeyFile
	);
	HRESULT OnYesNoCancel(
		[in]          BSTR bstrMessage,
		[in]          BSTR bstrYesInfo,
		[in]          BSTR bstrNoInfo,
		[in]          BSTR bstrCancelInfo,
		[in]          BSTR bstrTitle,
		[out, retval] int *pnResult
	);
	HRESULT OnConfirmOverwrite(
		[in]          BSTR bstrOldFile,
		[in]          BSTR bstrExistingFile
	);
	HRESULT OnConfirmOverwriteEx(
		[in]          struct Listing ltOldFile,
		[in]          struct Listing ltExistingFile
	);
	HRESULT OnReportError(
		[in]          BSTR bstrMessage
	);
};

// ISftpProvider
[
	object, uuid("1F8343E4-71DB-466a-A08D-B517DFBB38FF"),
	//uuid("b816a841-5022-11dc-9153-0090f5284f85"),
	oleautomation,
	helpstring("ISftpProvider Interface")
]
interface ISftpProvider : IUnknown
{
	HRESULT Initialize(
		[in] ISftpConsumer *pConsumer,
		[in] BSTR bstrUser,
		[in] BSTR bstrHost,
		[in] UINT uPort
	);
	HRESULT SwitchConsumer(
		[in] ISftpConsumer *pConsumer
	);
	HRESULT GetListing(
		[in] BSTR bstrDirectory,
		[out, retval] IEnumListing **ppEnum
	);
	HRESULT GetFile(
		[in] BSTR bstrFilePath,
		[in] BOOL fWriteable,
		[out, retval] IStream **ppStream
	);
	HRESULT Rename(
		[in] BSTR bstrFromPath,
		[in] BSTR bstrToPath,
		[out, retval] VARIANT_BOOL *fWasTargetOverwritten
	);

	/**
	 * @name Deletion methods
	 * We use two methods rather than one for safety.  This makes it explicit 
	 * what the @b intended consequence was. It's possible for a user to ask
	 * for a file to be deleted but, meanwhile, it has been changed to a 
	 * directory by someone else.  We do not want to delete the directory 
	 * without the user knowing.
	 */
	// @{
	HRESULT Delete(
		[in] BSTR bstrPath
	);
	HRESULT DeleteDirectory(
		[in] BSTR bstrPath
	);
	// @}

	/**
	 * @name Creation methods
	 * These are the dual of the deletion methods.  The first one, CreateFile,
	 * is mainly for the test-suite.  It just creates an empty file at the
	 * given path (roughly equivalent to Unix @c touch).
	 */
	// @{
	HRESULT CreateNewFile(
		[in] BSTR bstrPath
	);
	HRESULT CreateNewDirectory(
		[in] BSTR bstrPath
	);
	// @}
};
